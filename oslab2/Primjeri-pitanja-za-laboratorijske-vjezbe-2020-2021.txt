LAB1

Općenito:
1. Kako poslati signal procesu:
   a) preko tipkovnice
   b) iz ljuske
2. Navesti nekoliko signala i čemu služe.
3. Što radi funkcija: sigset, sighold, sigrelse? Opisati argumente.
4. Što se sve može postići sa sigset (koja sve ponašanja, što treba staviti kao argumente)?
5. Opisati postupak prihvata signala.
6. Kad se signal neće prihvatiti?
7. Ako je programu poslan signal SIGINT za vrijeme čekanja na funkciji sleep(10), što će se dogoditi nakon povratka iz obrade signala? Hoće li program "odspavati" neprospavano vrijeme ili ne? Zašto?

Sva ova pitanja se mogu pitati i obrnuto, npr. umjesto pitanja što radi sighold, može se pitati kojom se funkcijom zabranjuje daljnje prekidanje nekim signalom...

Vezano uz vježbe:
Zadatak 1a)
0. Provjeriti da li program radi (prevođenje/pokretanje).
1. Što bi se dogodilo kad bi se maknuo sigset (SIGALRM, periodicki_posao) iz programa?
2. Što bi se dogodilo kad bi umjesto pause(); ostavili samo ; ?
3. Zašto Ctrl+\ prekida izvođenje?
4. Poslati signal SIGKILL programu, koristeći drugi terminal (ljusku).

Zadatak 1b)
1. Provjeriti da li program ispravno radi (obrađuje prema prioritetu). Česti su problemi s granicama: isprobati je li radi i s 2 uzastopna prekida najveća prioriteta (5).
2. Čemu služi varijabla/polje: OZNAKA_ČEKANJA[], TEKUĆI_PRIORITET, PRIORITET?
3. Koju vrijednost imaju varijable ako se trenutno obrađuje prekid prioriteta 4, s time da je taj zahtjev prekinuo obradu prethodna zahtjeva - obradu prioriteta 2?
4. Što kad bi makli "omogući prekidanje;" i "zabrani prekidanje"? Bi li program radio isto? Obrazložiti.


LAB2
- O dretvema (a i b):
  * Što radi funkcija pthread_create, pthread_join
  * Čemu služi prvi|treći|četvrti argument za pthread_create
  * (2. parametar ne ističemo posebno, pa ga možemo preskočiti - tu su razna svojstva dretve: način raspoređivanja, stog, tip dretve, ...)
  * Zašto je zadnji argument (koji se prenosi u početnu funkciju dretve) kazaljka?
  * Što se događa s dretvom koja poziva pthread_join?
  * Kad će dretva koja je pozvala pthread_join nastaviti s radom?
  * Što bi se dogodilo da glavna dretva, nakon stvaranja novih nema petlje s pozivom pthread_join?

- lab-2-a
  * Zašto a može imati vrijednost manju od N*M (broj dretvi * broj iteracija)?

- O procesima
  * Što radi funkcija fork()?
  * Što vraća fork()?
  * Što radi funkcija wait()? Zašto je bitna?
  * Što ako roditelj ne pozove wait za svakog djeteta?
  * Kada bi umjesto wait(NULL) koristili wait(&varijabla) koju bi vrijednost imala varijabla nakon wait-a?
  * Što je to zajednička memorija?
  * Zašto treba koristiti zajedničku memoriju (dohvaćenu sa shmget+shmat) kada želimo komunikaciju između roditelja i djece te djece međusobno?
  * Opisati funkcije shmget i shmat (što radi jedna a što druga)?
  * Što radi funkcija shmdt i shmctl (kako se koristi u kodu)?
  # Provjeriti da shmget i shmat koriste ispravno, npr. da ne bi shmat koristili više puta, a shmget samo jednom.
  # Najbolje bi bilo kada bi memoriju za sve rezervirali jednom i onda to dijelili; ali nije krivo i ako za svako polje idu ispočetka: shmget + shmat (nije optimalno ali radi)


- Lamportov algoritam:
  * Čemu služi polje/varijabla: BROJ, ULAZ ?
  * Ako dretve 1, 2 i 3 žele u KO a BROJ[] ima vrijednosti: 5 4 9 koja će prva ući?
  * Koliko dretvi se može sinkronizirati Lamportovim algoritmom?
  * Da li će algoritam raditi ako imamo samo jednu dretvu?
  * Čemu služi ona prva petlja gdje se gleda ULAZ[j]?
  * Što kada je J == I u petlji "dok je"? Zašto to prolazi, tj. dretva ne čeka na samu sebe?
  * U najgorem slučaju, koliko će drugih dretvi trebati čekati jedna dretva, ako ih je ukupno N?
  * Što ako neka dretva zastane u NKO? Utječe li to na KO drugih dretvi?
